@page "/kitchens/{KithenId}/orders"

@using RestaurantOrderRouting.Kitchen.Application.Dtos
@using RestaurantOrderRouting.WebApp.Components.Buttons
@using RestaurantOrderRouting.Order.Application.Commands

@inject IHttpService _httpService;
@inject IConfiguration _configuration;

<h3>Kitchen Orders</h3>
<br />
<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link @ActivatedTabs[0]" @onclick="() => ToggleTab(0)" id="home-tab" data-bs-toggle="tab" data-bs-target="#grill" type="button" role="tab" aria-controls="grill" aria-selected="true">Burgers</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link @ActivatedTabs[1]" @onclick="() => ToggleTab(1)" id="profile-tab" data-bs-toggle="tab" data-bs-target="#fries" type="button" role="tab" aria-controls="fries" aria-selected="false">Fries</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link @ActivatedTabs[2]" @onclick="() => ToggleTab(2)" id="contact-tab" data-bs-toggle="tab" data-bs-target="#salad" type="button" role="tab" aria-controls="salad" aria-selected="false">Salads</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link @ActivatedTabs[3]" @onclick="() => ToggleTab(3)" id="contact-tab" data-bs-toggle="tab" data-bs-target="#drink" type="button" role="tab" aria-controls="drink" aria-selected="false">Drinks</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link @ActivatedTabs[4]" @onclick="() => ToggleTab(4)" id="contact-tab" data-bs-toggle="tab" data-bs-target="#deserts" type="button" role="tab" aria-controls="deserts" aria-selected="false">Deserts</button>
    </li>
</ul>
<div class="tab-content" id="myTabContent">
    @for (int i = 0; i < Tabs.Length; i++)
    {
        <div class="tab-pane fade @ActivatedTabs[i] justify-content-center" id="@Tabs[i]" role="tabpanel" aria-labelledby="home-tab">
            <div class="row">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Order Number</th>
                            <th>Item</th>
                            <th>Received at</th>
                            <th>Status</th>
                            <th>Change status to</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Orders.SelectMany(x => x.OrderItems.Where(o => o.KitchenAreaName.ToLower().Equals(Tabs[i])).OrderBy(o => o.Status).ThenBy(o => o.CreationDate)))
                        {
                            <tr class="@(GetRowClass(item.Status))">
                                <td>@item.OrderId</td>
                                <td>@item.ItemName</td>
                                <td>@item.CreationDate</td>
                                <td>@item.Status</td>
                                <td>
                                    @if (item.Status != Crosscutting.Enum.OrderItemStatus.Done)
                                    {
                                        <LoadingButton Text="@(GetNextStatus(item.Status).ToString())" OtherClasses="w-100" OnSubmit="@(async () => await ChangeOrderItemStatus(item.OrderId, item.OrderItemId, item.Status))" />
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string KithenId { get; set; }

    private string[] Tabs = new string[] { "grill", "fries", "salad", "drinks", "deserts" };
    private List<string> ActivatedTabs = new List<string>()
{
        "show active", "", "", "", ""
    };

    private void ToggleTab(int index)
    {
        for (int i = 0; i < ActivatedTabs.Count; i++)
        {
            if (i == index)
                ActivatedTabs[i] = "show active";
            else
                ActivatedTabs[i] = "";
        }
    }

    private List<OrderDto> Orders = new List<OrderDto>();

    protected override async Task OnInitializedAsync()
    {
        var result = await _httpService.GetAsync<List<OrderDto>>($"{_configuration["KITCHEN_API_ENDPOINT"]}/api/kitchens/{KithenId}/orders");

        if (result.IsSuccess)
            Orders = result.ResponseResult.Result;
    }

    private static Crosscutting.Enum.OrderItemStatus GetNextStatus(Crosscutting.Enum.OrderItemStatus currentStatus)
    {
        if (currentStatus == Crosscutting.Enum.OrderItemStatus.Done)
            return currentStatus;

        var nextValue = ((int)currentStatus) + 1;
        return (Crosscutting.Enum.OrderItemStatus)nextValue;
    }

    private async Task ChangeOrderItemStatus(int orderId, int orderItemId, Crosscutting.Enum.OrderItemStatus currentStatus)
    {
        var nextStatus = GetNextStatus(currentStatus);
        var command = new UpdateOrderItemStatusCommand()
        {
            NewStatus = nextStatus,
            OrderId = orderId,
            OrderItemId = orderItemId
        };

        var result = await _httpService.PostAsync<UpdateOrderItemStatusCommand, string>($"{_configuration["ORDER_API_ENDPOINT"]}/api/orders/{orderId}/items/{orderItemId}/update-status", command);

        if (result.IsSuccess)
        {
            var item = Orders.SelectMany(x => x.OrderItems.Where(o => o.OrderItemId == orderItemId)).FirstOrDefault();
            item.Status = nextStatus;
        }
    }

    private string GetRowClass(Crosscutting.Enum.OrderItemStatus status)
    {
        return status switch
        {
            Crosscutting.Enum.OrderItemStatus.Preparing => "table-warning",
            Crosscutting.Enum.OrderItemStatus.Done => "table-success",
            Crosscutting.Enum.OrderItemStatus.Canceled => "table-danger",
            _ => string.Empty
        };
    }
}
